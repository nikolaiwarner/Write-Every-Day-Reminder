// Generated by CoffeeScript 1.3.1
(function() {
  var WriteEveryDayReminder,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WriteEveryDayReminder = (function() {

    WriteEveryDayReminder.name = 'WriteEveryDayReminder';

    function WriteEveryDayReminder(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.finished_today = __bind(this.finished_today, this);

      this.last_finished_date = __bind(this.last_finished_date, this);

      this.time_left_today = __bind(this.time_left_today, this);

      this.update_advanced_info = __bind(this.update_advanced_info, this);

      this.restore_options = __bind(this.restore_options, this);

      this.save_options = __bind(this.save_options, this);

      this.update = __bind(this.update, this);

      this.schedule_refresh = __bind(this.schedule_refresh, this);

      this.update_interface = __bind(this.update_interface, this);

      this.rss_data_response = __bind(this.rss_data_response, this);

      this.fetch_from_rss_url = __bind(this.fetch_from_rss_url, this);

      this.version = '2.0.0';
      this.available = true;
      this.refresh_rate = options.refresh_rate || 30 * 60 * 1000;
      this.default_rss_url = options.default_rss_url || "http://750words.com/api/rss/[your id]";
      this.a_day_of_seconds = 86400;
      this.refresh_timer = void 0;
      this.notification = void 0;
      document.addEventListener("DOMContentLoaded", function() {
        if ($(".options").length > 0) {
          $(".save_button").click(function() {
            return _this.save_options();
          });
          return _this.restore_options();
        } else if ($(".notification").length > 0) {
          $(".time_left").html("Less than " + (_this.time_left_today()) + " left to write today.");
          return $(document).click(window.close);
        } else {
          _this.schedule_refresh();
          _this.update();
          window.addEventListener("storage", (function(event) {
            if (event.key === "rss_url") {
              _this.schedule_refresh();
              return _this.update();
            } else {
              return _this.update_interface();
            }
          }), false);
          return chrome.browserAction.onClicked.addListener(function(tab) {
            if (_this.available) {
              return chrome.tabs.create({
                url: "http://750words.com"
              });
            } else {
              return chrome.tabs.create({
                url: "options.html"
              });
            }
          });
        }
      });
    }

    WriteEveryDayReminder.prototype.fetch_from_rss_url = function() {
      var _this = this;
      if (localStorage["rss_url"] === void 0 || localStorage["rss_url"] === this.default_rss_url) {
        return localStorage["rss_url"] = this.default_rss_url;
      } else {
        return $.ajax({
          url: localStorage["rss_url"],
          success: function(data) {
            _this.available = true;
            return _this.rss_data_response(data);
          },
          error: function() {
            _this.available = false;
            return _this.update_interface();
          }
        });
      }
    };

    WriteEveryDayReminder.prototype.rss_data_response = function(data) {
      var finished_date, latest_item_description, regex, streak_array,
        _this = this;
      latest_item_description = $(data).find("rss channel item:first description").text();
      finished_date = new Date($(data).find("rss channel item:first pubDate").text());
      localStorage["last_finished_date"] = finished_date;
      if (this.finished_today()) {
        localStorage["progressed_today"] = "true";
      } else {
        localStorage["progressed_today"] = "false";
      }
      streak_array = void 0;
      if (latest_item_description.indexOf("finished") !== -1) {
        regex = new RegExp("is on a (.*) day writing streak", "g");
        streak_array = regex.exec(latest_item_description);
      }
      if (streak_array) {
        localStorage["current_streak"] = parseInt(streak_array[1], 10);
      } else {
        if (localStorage["progressed_today"] === "true") {
          localStorage["current_streak"] = "1";
        } else {
          localStorage["current_streak"] = "0";
        }
      }
      if (localStorage["show_notification"] === "true" && localStorage["progressed_today"] === "false") {
        this.notification = webkitNotifications.createHTMLNotification("notification.html");
        this.notification.show();
        setTimeout((function() {
          return _this.notification.cancel();
        }), 10000);
      }
      return this.update_interface();
    };

    WriteEveryDayReminder.prototype.update_interface = function() {
      if (this.available) {
        if (localStorage["show_badge"] === "true") {
          chrome.browserAction.setBadgeText({
            text: localStorage["current_streak"]
          });
        } else {
          chrome.browserAction.setBadgeText({
            text: ""
          });
        }
        if (localStorage["progressed_today"] === "true") {
          chrome.browserAction.setIcon({
            path: "icon_success.png"
          });
          return chrome.browserAction.setBadgeBackgroundColor({
            color: [0, 255, 0, 255]
          });
        } else {
          chrome.browserAction.setIcon({
            path: "icon.png"
          });
          return chrome.browserAction.setBadgeBackgroundColor({
            color: [255, 0, 0, 255]
          });
        }
      } else {
        chrome.browserAction.setIcon({
          path: "icon_unavailable.png"
        });
        return chrome.browserAction.setBadgeText({
          text: ""
        });
      }
    };

    WriteEveryDayReminder.prototype.schedule_refresh = function() {
      var _this = this;
      if (this.refresh_timer) {
        clearInterval(this.refresh_timer);
      }
      return this.refresh_timer = setInterval((function() {
        return _this.update();
      }), this.refresh_rate);
    };

    WriteEveryDayReminder.prototype.update = function() {
      return this.fetch_from_rss_url();
    };

    WriteEveryDayReminder.prototype.save_options = function() {
      var _this = this;
      localStorage["show_badge"] = $("#show_badge").is(":checked");
      localStorage["show_notification"] = $("#show_notification").is(":checked");
      localStorage["rss_url"] = $("#rss_url").val();
      $("#status").html("Options Saved.");
      return setTimeout((function() {
        return $("#status").html("");
      }), 4000);
    };

    WriteEveryDayReminder.prototype.restore_options = function() {
      $("#show_badge").attr("checked", localStorage["show_badge"] === "true");
      $("#show_notification").attr("checked", localStorage["show_notification"] === "true");
      $("#rss_url").val(localStorage["rss_url"]);
      return this.update_advanced_info();
    };

    WriteEveryDayReminder.prototype.update_advanced_info = function() {
      var info;
      info = "<strong>Advanced Info:</strong>            <br>            Last Finished Writing: " + (this.last_finished_date().fromNow()) + "            <br>            Finished Today: " + (this.finished_today() ? 'Yes' : 'No') + "            <br>            Time remaining today: " + (this.time_left_today()) + "            <br>            Current Streak: " + localStorage['current_streak'];
      return $(".advanced_info").html(info);
    };

    WriteEveryDayReminder.prototype.time_left_today = function() {
      return moment.duration(moment().eod().diff(moment(), "seconds"), "seconds").humanize();
    };

    WriteEveryDayReminder.prototype.last_finished_date = function() {
      return moment(new Date(localStorage["last_finished_date"]));
    };

    WriteEveryDayReminder.prototype.finished_today = function() {
      return moment().eod().diff(moment(this.last_finished_date()), "seconds") < this.a_day_of_seconds;
    };

    return WriteEveryDayReminder;

  })();

  window.write_every_day_reminder = new WriteEveryDayReminder;

}).call(this);
